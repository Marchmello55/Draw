from aiogram import Router, Bot, F
from aiogram.types import Message,  ContentType
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command


from config_data.config import load_config, Config
from database import requests as rq
from filter.access_filter import HasAccessFilter

import logging
import tempfile
import os

router = Router()
config: Config = load_config()


class AddFile(StatesGroup):
    waiting_for_file = State()


@router.message(Command("add_file"), HasAccessFilter("ADMIN"))
async def add_current_codes(message: Message, state: FSMContext):
    """
    –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –∫–æ–¥–æ–≤
    """
    logging.info("add_current_codes")
    await message.delete()

    await message.answer(
        "üìÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .txt —Å –∫–æ–¥–∞–º–∏.\n\n"
        "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–±–µ–ª–æ–º –∏–ª–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–æ–π.\n"
        "–ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:\n"
        "CODE123\n"
        "CODE456 "
        "CODE789"
    )

    await state.set_state(AddFile.waiting_for_file)


@router.message(StateFilter(AddFile.waiting_for_file), F.content_type == ContentType.DOCUMENT)
async def process_code_file(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–∞–º–∏
    """
    logging.info("process_code_file")
    pass
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .txt
    if not message.document.file_name.endswith('.txt'):
        await message.answer("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt")

        return

    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.txt', delete=False) as tmp_file:
            temp_filename = tmp_file.name

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await bot.download(
            message.document,
            destination=temp_filename
        )

        # –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º —Ñ–∞–π–ª
        codes = await parse_codes_from_file(temp_filename)

        if not codes:
            await message.answer("‚ùå –§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥—ã –≤ –±–∞–∑—É
        added_count = await rq.add_codes_bulk(codes)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await message.answer(
            f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–¥–æ–≤ –≤ —Ñ–∞–π–ª–µ: {len(codes)}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}\n"
        )

    except Exception as e:
        logging.error(f"Error processing file: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        await state.clear()
        if os.path.exists(temp_filename):
            os.unlink(temp_filename)


@router.message(StateFilter(AddFile.waiting_for_file))
async def wrong_file_type(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    """
    logging.info("wrong_file_type")
    await message.delete()
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .txt —Å –∫–æ–¥–∞–º–∏.\n\n"
        "–ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª "
        "—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–¥—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ."
    )


async def parse_codes_from_file(file_path: str) -> list:
    """
    –ü–∞—Ä—Å–∏—Ç –∫–æ–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    """
    logging.info("parse_codes_from_file")
    codes = []

    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            for line in file:
                # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç  –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
                code = line.replace("\n", " ")

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not code:
                    continue

                code = code.split(" ")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
                if code:
                    codes.extend(code)
                    codes.remove("")

        logging.info(f"Parsed {len(codes)} codes from file")
        return codes

    except Exception as e:
        logging.error(f"Error parsing file: {e}")
        return []
